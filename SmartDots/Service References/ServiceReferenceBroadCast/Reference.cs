//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartDots.ServiceReferenceBroadCast {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDataType", Namespace="http://schemas.datacontract.org/2004/07/BroadCasterServiceDier1")]
    [System.SerializableAttribute()]
    public partial class EventDataType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeSendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Application {
            get {
                return this.ApplicationField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationField, value) != true)) {
                    this.ApplicationField = value;
                    this.RaisePropertyChanged("Application");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventMessage {
            get {
                return this.EventMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.EventMessageField, value) != true)) {
                    this.EventMessageField = value;
                    this.RaisePropertyChanged("EventMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeSend {
            get {
                return this.TimeSendField;
            }
            set {
                if ((this.TimeSendField.Equals(value) != true)) {
                    this.TimeSendField = value;
                    this.RaisePropertyChanged("TimeSend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceBroadCast.IBroadCastService", CallbackContract=typeof(SmartDots.ServiceReferenceBroadCast.IBroadCastServiceCallback))]
    public interface IBroadCastService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/RegisterClient", ReplyAction="http://tempuri.org/IBroadCastService/RegisterClientResponse")]
        void RegisterClient(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/RegisterClient", ReplyAction="http://tempuri.org/IBroadCastService/RegisterClientResponse")]
        System.Threading.Tasks.Task RegisterClientAsync(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/SendBroadCastWithSkype")]
        void SendBroadCastWithSkype(SmartDots.ServiceReferenceBroadCast.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/SendBroadCastWithSkype")]
        System.Threading.Tasks.Task SendBroadCastWithSkypeAsync(SmartDots.ServiceReferenceBroadCast.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/SendBroadCast")]
        void SendBroadCast(SmartDots.ServiceReferenceBroadCast.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/SendBroadCast")]
        System.Threading.Tasks.Task SendBroadCastAsync(SmartDots.ServiceReferenceBroadCast.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/BroadCastPing", ReplyAction="http://tempuri.org/IBroadCastService/BroadCastPingResponse")]
        string[] BroadCastPing(SmartDots.ServiceReferenceBroadCast.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/BroadCastPing", ReplyAction="http://tempuri.org/IBroadCastService/BroadCastPingResponse")]
        System.Threading.Tasks.Task<string[]> BroadCastPingAsync(SmartDots.ServiceReferenceBroadCast.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/CreateNewsMessage")]
        void CreateNewsMessage(SmartDots.ServiceReferenceBroadCast.EventDataType message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/CreateNewsMessage")]
        System.Threading.Tasks.Task CreateNewsMessageAsync(SmartDots.ServiceReferenceBroadCast.EventDataType message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/KeepAlive")]
        void KeepAlive();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/KeepAlive")]
        System.Threading.Tasks.Task KeepAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/UsersForApplication", ReplyAction="http://tempuri.org/IBroadCastService/UsersForApplicationResponse")]
        string[] UsersForApplication(string application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/UsersForApplication", ReplyAction="http://tempuri.org/IBroadCastService/UsersForApplicationResponse")]
        System.Threading.Tasks.Task<string[]> UsersForApplicationAsync(string application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/UserMailsForApplication", ReplyAction="http://tempuri.org/IBroadCastService/UserMailsForApplicationResponse")]
        string[] UserMailsForApplication(string application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/UserMailsForApplication", ReplyAction="http://tempuri.org/IBroadCastService/UserMailsForApplicationResponse")]
        System.Threading.Tasks.Task<string[]> UserMailsForApplicationAsync(string application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/History", ReplyAction="http://tempuri.org/IBroadCastService/HistoryResponse")]
        SmartDots.ServiceReferenceBroadCast.EventDataType[] History();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/History", ReplyAction="http://tempuri.org/IBroadCastService/HistoryResponse")]
        System.Threading.Tasks.Task<SmartDots.ServiceReferenceBroadCast.EventDataType[]> HistoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/HistoryLastItem", ReplyAction="http://tempuri.org/IBroadCastService/HistoryLastItemResponse")]
        SmartDots.ServiceReferenceBroadCast.EventDataType HistoryLastItem();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadCastService/HistoryLastItem", ReplyAction="http://tempuri.org/IBroadCastService/HistoryLastItemResponse")]
        System.Threading.Tasks.Task<SmartDots.ServiceReferenceBroadCast.EventDataType> HistoryLastItemAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBroadCastServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadCastService/BroadCastToClients")]
        void BroadCastToClients(SmartDots.ServiceReferenceBroadCast.EventDataType eventData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBroadCastServiceChannel : SmartDots.ServiceReferenceBroadCast.IBroadCastService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BroadCastServiceClient : System.ServiceModel.DuplexClientBase<SmartDots.ServiceReferenceBroadCast.IBroadCastService>, SmartDots.ServiceReferenceBroadCast.IBroadCastService {
        
        public BroadCastServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BroadCastServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BroadCastServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BroadCastServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BroadCastServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterClient(string clientName) {
            base.Channel.RegisterClient(clientName);
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(string clientName) {
            return base.Channel.RegisterClientAsync(clientName);
        }
        
        public void SendBroadCastWithSkype(SmartDots.ServiceReferenceBroadCast.EventDataType eventData) {
            base.Channel.SendBroadCastWithSkype(eventData);
        }
        
        public System.Threading.Tasks.Task SendBroadCastWithSkypeAsync(SmartDots.ServiceReferenceBroadCast.EventDataType eventData) {
            return base.Channel.SendBroadCastWithSkypeAsync(eventData);
        }
        
        public void SendBroadCast(SmartDots.ServiceReferenceBroadCast.EventDataType eventData) {
            base.Channel.SendBroadCast(eventData);
        }
        
        public System.Threading.Tasks.Task SendBroadCastAsync(SmartDots.ServiceReferenceBroadCast.EventDataType eventData) {
            return base.Channel.SendBroadCastAsync(eventData);
        }
        
        public string[] BroadCastPing(SmartDots.ServiceReferenceBroadCast.EventDataType eventData) {
            return base.Channel.BroadCastPing(eventData);
        }
        
        public System.Threading.Tasks.Task<string[]> BroadCastPingAsync(SmartDots.ServiceReferenceBroadCast.EventDataType eventData) {
            return base.Channel.BroadCastPingAsync(eventData);
        }
        
        public void CreateNewsMessage(SmartDots.ServiceReferenceBroadCast.EventDataType message) {
            base.Channel.CreateNewsMessage(message);
        }
        
        public System.Threading.Tasks.Task CreateNewsMessageAsync(SmartDots.ServiceReferenceBroadCast.EventDataType message) {
            return base.Channel.CreateNewsMessageAsync(message);
        }
        
        public void KeepAlive() {
            base.Channel.KeepAlive();
        }
        
        public System.Threading.Tasks.Task KeepAliveAsync() {
            return base.Channel.KeepAliveAsync();
        }
        
        public string[] UsersForApplication(string application) {
            return base.Channel.UsersForApplication(application);
        }
        
        public System.Threading.Tasks.Task<string[]> UsersForApplicationAsync(string application) {
            return base.Channel.UsersForApplicationAsync(application);
        }
        
        public string[] UserMailsForApplication(string application) {
            return base.Channel.UserMailsForApplication(application);
        }
        
        public System.Threading.Tasks.Task<string[]> UserMailsForApplicationAsync(string application) {
            return base.Channel.UserMailsForApplicationAsync(application);
        }
        
        public SmartDots.ServiceReferenceBroadCast.EventDataType[] History() {
            return base.Channel.History();
        }
        
        public System.Threading.Tasks.Task<SmartDots.ServiceReferenceBroadCast.EventDataType[]> HistoryAsync() {
            return base.Channel.HistoryAsync();
        }
        
        public SmartDots.ServiceReferenceBroadCast.EventDataType HistoryLastItem() {
            return base.Channel.HistoryLastItem();
        }
        
        public System.Threading.Tasks.Task<SmartDots.ServiceReferenceBroadCast.EventDataType> HistoryLastItemAsync() {
            return base.Channel.HistoryLastItemAsync();
        }
    }
}
