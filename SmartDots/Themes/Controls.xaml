<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
                    xmlns:themes="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxwui="http://schemas.devexpress.com/winfx/2008/xaml/windowsui"
                    xmlns:themeKeys="http://schemas.devexpress.com/winfx/2008/xaml/windowsui/themekeys"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:internal="http://schemas.devexpress.com/winfx/2008/xaml/windowsui/internal"
                    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
                    xmlns:dxdove="http://schemas.devexpress.com/winfx/2008/xaml/docking/visualelements"
                    xmlns:themeKeys1="http://schemas.devexpress.com/winfx/2008/xaml/docking/themekeys"
                    xmlns:userControls="clr-namespace:SmartDots.View.UserControls"
                    xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"
                    xmlns:ve="http://schemas.devexpress.com/winfx/2008/xaml/docking/visualelements"
                    xmlns:helpers="clr-namespace:SmartDots.Helpers">

    <helpers:NullImageConverter x:Key="nullImageConverter"/>

    <system:Double x:Key="EditorFontSize">14</system:Double>

    <!-- Colors -->
    <Color x:Key="ColorSmartFishOrange" A="255" R="240" G="80" B="38"/>
    <Color x:Key="ColorSmartFishLightOrange" A="255" R="255" G="183" B="112"/>
    <Color x:Key="ColorSmartFishPeachOrange" A="255" R="255" G="204" B="153"/>
    <Color x:Key="ColorSmartFishYellow" A="255" R="234" G="225" B="143"/>

    <Color x:Key="ColorSmartFishDarkBlue" A="255" R="41" G="60" B="69"/>
    <Color x:Key="ColorSmartFishFairBlue" A="255" R="96" G="133" B="150"/>
    <Color x:Key="ColorSmartFishFairBlue2" A="255" R="200" G="225" B="230"/>
    <Color x:Key="ColorSmartFishLightBlue" A="255" R="71" G="195" B="221"/>

    <Color x:Key="ColorSmartFishDarkGray" A="255" R="25" G="25" B="25"/>
    <Color x:Key="ColorSmartFishFairGray" A="255" R="128" G="128" B="128"/>
    <Color x:Key="ColorSmartFishLightGray" A="255" R="221" G="221" B="221"/>
    <Color x:Key="ColorSmartFishBorderGray" A="255" R="191" G="191" B="191"/>
    <Color x:Key="ColorSmartFishControlGray" A="255" R="246" G="246" B="246"/>

    <!-- Brushes -->
    <SolidColorBrush x:Key="BrushSmartFishOrange" Color="{StaticResource ColorSmartFishOrange}"/>
    <SolidColorBrush x:Key="BrushSmartFishLightOrange" Color="{StaticResource ColorSmartFishLightOrange}"/>
    <SolidColorBrush x:Key="BrushSmartFishPeachOrange" Color="{StaticResource ColorSmartFishPeachOrange}"/>
    <SolidColorBrush x:Key="BrushSmartFishYellow" Color="{StaticResource ColorSmartFishYellow}"/>

    <SolidColorBrush x:Key="BrushSmartFishDarkBlue" Color="{StaticResource ColorSmartFishDarkBlue}"/>
    <SolidColorBrush x:Key="BrushSmartFishFairBlue" Color="{StaticResource ColorSmartFishFairBlue}"/>
    <SolidColorBrush x:Key="BrushSmartFishFairBlue2" Color="{StaticResource ColorSmartFishFairBlue2}"/>
    <SolidColorBrush x:Key="BrushSmartFishLightBlue" Color="{StaticResource ColorSmartFishLightBlue}"/>

    <SolidColorBrush x:Key="BrushSmartFishDarkGray" Color="{StaticResource ColorSmartFishDarkGray}"/>
    <SolidColorBrush x:Key="BrushSmartFishFairGray" Color="{StaticResource ColorSmartFishFairGray}"/>
    <SolidColorBrush x:Key="BrushSmartFishLightGray" Color="{StaticResource ColorSmartFishLightGray}"/>
    <SolidColorBrush x:Key="BrushSmartFishBorderGray" Color="{StaticResource ColorSmartFishBorderGray}"/>
    <SolidColorBrush x:Key="BrushSmartFishControlGray" Color="{StaticResource ColorSmartFishControlGray}"/>

    <!-- Images -->
    <BitmapImage x:Key="Filter" UriSource="/SmartDots;component/Resources/Filter.png" />
    <BitmapImage x:Key="New" UriSource="/SmartDots;Component/Resources/New.png" />
    <BitmapImage x:Key="Delete" UriSource="/SmartDots;Component/Resources/Delete.png" />
    <BitmapImage x:Key="Details" UriSource="/SmartDots;Component/Resources/Details.png" />
    <BitmapImage x:Key="Edit" UriSource="/SmartDots;Component/Resources/Edit.png" />
    <BitmapImage x:Key="Status" UriSource="/SmartDots;Component/Resources/Padlock.png" />
    <BitmapImage x:Key="Padlock" UriSource="/SmartDots;Component/Resources/Padlock.png" />
    <BitmapImage x:Key="Close" UriSource="/SmartDots;Component/Resources/Cancel.png" />
    <BitmapImage x:Key="ContextButton" UriSource="/SmartDots;Component/Resources/ContextButtton.png" />


    <Style TargetType="{x:Type Button}">
        <Setter Property="Height" Value="40" />
    </Style>

    <Style TargetType="{x:Type dxe:DateEdit}">
        <Setter Property="FontSize" Value="{StaticResource EditorFontSize}"></Setter>
    </Style>

    <Style TargetType="{x:Type dxe:ButtonEdit}">
        <Setter Property="FontSize" Value="{StaticResource EditorFontSize}"></Setter>
        <Setter Property="AllowDefaultButton" Value="False"></Setter>
    </Style>

    <Style TargetType="{x:Type dxg:LookUpEdit}">
        <Setter Property="PopupMinWidth" Value="450" />
        <Setter Property="FontSize" Value="{StaticResource EditorFontSize}"></Setter>
    </Style>

    <Style TargetType="{x:Type dxg:GridControl}">
        <Setter Property="AutoGenerateColumns" Value="None"></Setter>
        <Setter Property="ShowBorder" Value="True"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style TargetType="{x:Type dxg:TableView}">
        <Setter Property="AutoWidth" Value="True"></Setter>
        <Setter Property="AllowBestFit" Value="True"></Setter>
        <Setter Property="BestFitArea" Value="All"></Setter>
        <Setter Property="BestFitMode" Value="AllRows"></Setter>
        <!--<Setter Property="AllowEditing" Value="False"></Setter>-->
        <Setter Property="RowMinHeight" Value="34"></Setter>
        <Setter Property="ShowGroupPanel" Value="False"></Setter>
        <Setter Property="ShowIndicator" Value="False"></Setter>
        <Setter Property="AllowColumnFiltering" Value="False"></Setter>
        <Setter Property="VerticalScrollbarVisibility" Value="Auto"></Setter>
        <!--<Setter Property="NavigationStyle" Value="Row"></Setter>-->
        <Setter Property="TotalSummaryContentStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentPresenter}">
                    <Setter Property="TextElement.FontSize" Value="20" />
                    <Setter Property="TextElement.FontWeight" Value="Normal" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="Margin" Value="0, 10" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="FadeSelectionOnLostFocus" Value="False"/>

    </Style>

    <Style TargetType="{x:Type dxg:RowControl}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter Property="Background" Value="{StaticResource BrushSmartFishYellow}" />
            </DataTrigger>
            <Trigger Property="dxg:DataControlBase.SelectedItem" Value="True">
                <Setter Property="Background" Value="{StaticResource BrushSmartFishYellow}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="MinHeight" Value="12"></Setter>
        <Setter Property="MaxHeight" Value="12"></Setter>
        <Setter Property="Height" Value="12"></Setter>
    </Style>

    <Style TargetType="{x:Type dxlc:LayoutGroup}">
        <Setter Property="ItemSpace" Value="15" />
        <Setter Property="MaxWidth" Value="750" />
    </Style>

    <Style TargetType="{x:Type dxlc:LayoutItem}">
        <Setter Property="LabelTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" Margin="0,0,20,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="34"></Setter>
    </Style>

    <!--<Style TargetType="{x:Type dxe:ProgressBarEdit}">
        <Setter Property="dx:ThemeManager.ThemeName" Value="Office2010Silver" />
        <Setter Property="MaxWidth" Value="500" />
    </Style>-->

    <Style TargetType="RadioButton">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <dx:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>
    <dx:BoolToVisibilityInverseConverter x:Key="boolToVisibilityInverseConverter"/>

    <Color x:Key="contentColor">#FFE3EFFF</Color>
    <Color x:Key="contentColorHover">#FFE3EFFF</Color>
    <Color x:Key="contentColorPressed">#FF839BBB</Color>
    <Color x:Key="contentColorChecked">#FF839BBB</Color>
    <Color x:Key="contentColorHoverChecked">#FF839BBB</Color>
    <Color x:Key="contentColorPressedChecked">#FFE3EFFF</Color>


    <SolidColorBrush x:Key="contentBrush" Color="Green" />
    <SolidColorBrush x:Key="borderBrush" Color="Red" />

    <SolidColorBrush x:Key="backBrush" Color="#00E3EFFF" />

    <SolidColorBrush x:Key="contentBrushHover" Color="{StaticResource contentColorHover}" />
    <SolidColorBrush x:Key="borderBrushHover" Color="#FFE3EFFF" />
    <SolidColorBrush x:Key="backBrushHover" Color="#3FE3EFFF" />

    <SolidColorBrush x:Key="contentBrushPressed" Color="{StaticResource contentColorPressed}" />
    <SolidColorBrush x:Key="borderBrushPressed" Color="#FFE3EFFF" />
    <SolidColorBrush x:Key="backBrushPressed" Color="#FFE3EFFF" />

    <SolidColorBrush x:Key="contentBrushChecked" Color="{StaticResource contentColorChecked}" />
    <SolidColorBrush x:Key="borderBrushChecked" Color="#FFE3EFFF" />
    <SolidColorBrush x:Key="backBrushChecked" Color="#FFE3EFFF" />

    <SolidColorBrush x:Key="contentBrushHoverChecked" Color="{StaticResource contentColorHoverChecked}" />
    <SolidColorBrush x:Key="borderBrushHoverChecked" Color="#FFE3EFFF" />
    <SolidColorBrush x:Key="backBrushHoverChecked" Color="#FFE3EFFF" />

    <SolidColorBrush x:Key="contentBrushPressedChecked" Color="{StaticResource contentColorPressedChecked}" />
    <SolidColorBrush x:Key="borderBrushPressedChecked" Color="#FFE3EFFF" />
    <SolidColorBrush x:Key="backBrushPressedChecked" Color="#00E3EFFF" />

    <ControlTemplate TargetType="dxwui:AppBarButton" x:Key="{themeKeys:AppBarElementsThemeKey ResourceKey=AppBarButtonTemplate, IsThemeIndependent=True}">
        <Grid x:Name="RootGrid" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Background="Transparent">
            <dxmvvm:Interaction.Behaviors>
                <internal:AnimatedPanelBehavior x:Name="animatedPanelBehavior" Width="70" />
            </dxmvvm:Interaction.Behaviors>
            <StackPanel x:Name="panel" Margin="{TemplateBinding Padding}" VerticalAlignment="Top" >
                <Border Height="{TemplateBinding EllipseDiameter}" Width="{TemplateBinding EllipseDiameter}" Padding="1">
                    <Grid x:Name="PART_ContentGrid" >
                        <Ellipse x:Name="back" Fill="{StaticResource backBrush}" UseLayoutRounding="False"/>
                        <Ellipse x:Name="border" Stroke="{StaticResource borderBrush}" StrokeThickness="{TemplateBinding StrokeThickness}"  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsEllipseEnabled, Converter={StaticResource boolToVisibilityConverter}}" UseLayoutRounding="False"/>
                        <Grid Width="{TemplateBinding GlyphWidth}" Height="{TemplateBinding GlyphHeight}">
                            <internal:ShapeContentPresenter x:Name="content" Foreground="White" 
                                                          HorizontalAlignment="Center" VerticalAlignment="Center" 
                                                          FontFamily="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentFontFamily}" 
                                                          FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentFontSize}" 
                                                          Visibility="{Binding IsGlyphVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ResourceKey=boolToVisibilityInverseConverter}}"
                                                          AccentColor="{Binding Path=(dxb:ImageColorizer.Color), RelativeSource={RelativeSource TemplatedParent}}"/>
                            <internal:ImagePresenter x:Name="glyph"
                                    AccentColor="{Binding Path=(dxb:ImageColorizer.Color), RelativeSource={RelativeSource TemplatedParent}}"
                                    AllowAccent="{TemplateBinding AllowGlyphTheming}"
                                    Source="{TemplateBinding Glyph}" Visibility="{Binding IsGlyphVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ResourceKey=boolToVisibilityConverter}}" Stretch="{TemplateBinding GlyphStretch}" />
                        </Grid>
                    </Grid>
                </Border>
                <internal:ShapeContentPresenter x:Name="PART_Label" Content="{TemplateBinding Label}" ContentTemplate="{TemplateBinding LabelTemplate}" ContentTemplateSelector="{TemplateBinding LabelTemplateSelector}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsCompact, Converter={StaticResource boolToVisibilityInverseConverter}}" FontFamily="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontFamily}" FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize}" Foreground="White" AccentColor="{StaticResource contentColor}" >
                </internal:ShapeContentPresenter>
            </StackPanel>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource borderBrushHover}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource backBrushHover}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentBrushHover}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorHover}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorHover}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource borderBrushPressed}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource backBrushPressed}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentBrushPressed}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorPressed}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorPressed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="panel" Storyboard.TargetProperty="Opacity" To="0.6" Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckedStates">
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource borderBrushChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource backBrushChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentBrushChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CheckedMouseOver">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource borderBrushHoverChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource backBrushHoverChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentBrushHoverChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorHoverChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorHoverChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CheckedPressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource borderBrushPressedChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource backBrushPressedChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentBrushPressedChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorPressedChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorPressedChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CheckedDisabled">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource borderBrushChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource backBrushChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentBrushChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource contentColorChecked}" />
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimation Storyboard.TargetName="panel" Storyboard.TargetProperty="Opacity" To="0.6" Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CompactStates">
                    <VisualState x:Name="Compact">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Label">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="animatedPanelBehavior">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <system:Double>60</system:Double>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="FullSize"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{themeKeys1:DockPaneElementsThemeKey ResourceKey=Template, IsThemeIndependent=True}" TargetType="ve:DockPane">
        <Grid dxdove:DockPane.HitTestType="Bounds" Background="#fff" Margin="{Binding Path=LayoutItem.ActualMargin, RelativeSource={RelativeSource TemplatedParent}}">
            <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishFairBlue2}" Background="#fff" Margin="{Binding Path=LayoutItem.ActualMargin, RelativeSource={RelativeSource TemplatedParent}}" Padding="0"  CornerRadius="{TemplateBinding ActualCaptionCornerRadius}" SnapsToDevicePixels="True">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <dxdove:DockPaneHeaderPresenter x:Name="PART_Header" Grid.Row="0" Content="{TemplateBinding Header}" Margin="{DynamicResource {themeKeys1:DockPaneElementsThemeKey ResourceKey=HeaderMargin}}"/>
                    <dxdove:DockPaneContentPresenter x:Name="PART_Content" Grid.Row="1" Content="{TemplateBinding Content}" Margin="{Binding Path=LayoutItem.ActualPadding, RelativeSource={RelativeSource TemplatedParent}}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="StatusColumn">
        <Rectangle Margin="5" StrokeThickness="1" ToolTip="{Binding Data.Status.Tooltip}" Stroke="{Binding Data.Status.BorderColor}">
            <Rectangle.Fill>
                <SolidColorBrush Color="{Binding Data.Status.Color}"/>
            </Rectangle.Fill>
        </Rectangle>
    </DataTemplate>

    <Style x:Key="AppBarItemBaseStyle" TargetType="Control">
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="AppBarButtonBaseStyle" TargetType="dxwui:AppBarButton" BasedOn="{StaticResource AppBarItemBaseStyle}">
        <Setter Property="IsEllipseEnabled" Value="False"/>
        <Setter Property="AllowGlyphTheming" Value="False"/>
        <Setter Property="GlyphStretch" Value="None"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <Style TargetType="dxwui:AppBar">
        <Setter Property="Height" Value="85" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HideMode" Value="AlwaysVisible" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="#293C45" />
        <Setter Property="IsOpen" Value="True" />
        <Setter Property="IsSticky" Value="True" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl>
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="dxwui:AppBarButton" BasedOn="{StaticResource AppBarButtonBaseStyle}"/>
    <Style TargetType="dxwui:AppBarSeparator" BasedOn="{StaticResource AppBarItemBaseStyle}"/>
    <Style TargetType="dxwui:AppBarToggleButton" BasedOn="{StaticResource AppBarButtonBaseStyle}"/>

    <Style TargetType="userControls:WindowButton">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type userControls:WindowButton}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="dxdo:LayoutPanel">
        <Setter Property="Appearance">
            <Setter.Value>
                <dxdo:Appearance>
                    <dxdo:Appearance.Normal>
                        <dxdo:AppearanceObject Background="{StaticResource BrushSmartFishFairBlue2}" Foreground="{StaticResource BrushSmartFishDarkBlue}"/>
                    </dxdo:Appearance.Normal>
                    <dxdo:Appearance.Active>
                        <dxdo:AppearanceObject Background="{StaticResource BrushSmartFishFairBlue2}" Foreground="{StaticResource BrushSmartFishOrange}"/>
                    </dxdo:Appearance.Active>
                </dxdo:Appearance>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton">
        <Setter Property="Width" Value="28"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="dx:ThemeManager.ThemeName" Value="None"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishDarkBlue}" 
                            CornerRadius="3" Background="{StaticResource BrushSmartFishDarkBlue}" >
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property='IsMouseOver' Value='True'>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishDarkBlue}" 
                                    CornerRadius="3" Background="{StaticResource BrushSmartFishOrange}">
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                  Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property='IsChecked' Value='True'>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishDarkBlue}" 
                                    CornerRadius="3" Background="{StaticResource BrushSmartFishOrange}">
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                  Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property='IsPressed' Value='True'>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border CornerRadius="3" Background="{StaticResource BrushSmartFishLightOrange}">
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                  Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property='IsEnabled' Value='False'>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishFairGray}" 
                                    CornerRadius="3" Background="{StaticResource BrushSmartFishFairGray}" Opacity="0.8" >
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SDButtonBase" TargetType="ButtonBase">
        <Setter Property="Width" Value="28"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="dx:ThemeManager.ThemeName" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishDarkBlue}" 
                            CornerRadius="3" Background="{StaticResource BrushSmartFishDarkBlue}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishDarkBlue}" 
                                    CornerRadius="3" Background="{StaticResource BrushSmartFishOrange}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishDarkBlue}" 
                                    CornerRadius="3" Background="{StaticResource BrushSmartFishLightOrange}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border BorderThickness="1" BorderBrush="{StaticResource BrushSmartFishFairGray}" 
                                    CornerRadius="3" Background="{StaticResource BrushSmartFishFairGray}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type dxb:PopupMenu}">
        <Setter Property="dxb:BarManager.ShowGlyphsInPopupMenus" Value="False"/>
        <Setter Property="MinWidth" Value="150"/>
    </Style>

    <Style TargetType="{x:Type dxb:BarItemMenuHeader}">
        <Setter Property="ItemStyle">
            <Setter.Value>
                <Style TargetType="Control">
                    <Setter Property="Background" Value="{StaticResource BrushSmartFishFairGray}"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BarItem" TargetType="{x:Type dxb:BarEditItem}">
        <Setter Property="EditStyle">
            <Setter.Value>
                <Style TargetType="dxe:BaseEdit">
                    <Setter Property="Margin" Value="0 8 0 8"/>
                    <Setter Property="Width" Value="150"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowsButtonImage" TargetType="Image">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
        <Setter Property="RenderOptions.EdgeMode" Value="Unspecified"/>
    </Style>

    <!--<Style TargetType="dxg:GridColumn" x:Key="AnalysisColumn">
        <Setter Property="CellTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="White">
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
</ResourceDictionary>







